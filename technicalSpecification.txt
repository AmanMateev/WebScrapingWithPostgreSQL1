Here is the translation of your text into English while maintaining its original format:

---

I want to get a list of items. Each element of this list will consist of the book's title, price, and availability.
The price is displayed somewhat incorrectly. This needs to be fixed. Once I manage to output this list to the console, it would be great to connect a database and set up saving the data into the database.
If it goes well:

It would be great to add a filter to remove duplicates.
A functionality to update the information.
Logic for the first task:
There will be a main list that will store collections of data.
Write a single loop that will process an array.
New task:
Extract all the information possible from the website. Save it to the database.

Group books by genres.
Create a database to store all the information about the books.
Create a main table to store all the information about the books.
The following fields will be present:
ID
Title
Price
Availability
Genre
Write SQL commands to output tables of books grouped by genres.
Additional:
Ensure the script runs continuously for about 10 minutes, sending 5 requests to the website during this time (i.e., every 2 minutes).
Figure out how to extract a link from the genre tag to navigate to the page of a specific genre.
Think about variable names.
Consider optimizing the code.
()()()()()()()()

Algorithm for the first task:
1.1) Create a loop where one genre will be extracted from the list of genres.
1.2) Based on the retrieved genre, form a string representing a link to the page of books grouped by that genre.
1.3) Navigate to the link, retrieve the data from it, and create a kind of object where the field will be the genre name, and its element will be the list of books of that genre.
1.4) Thus, create an object with approximately 51 fields and 51 lists.
1.5) Proceed to implement the second point.

()()()()()()()()

Completely rewrite the code:
Form links to pages by genres.
Navigate to each page and retrieve all necessary information from it (price, title, availability, genre).
Save this information into the database.
Move to the next genre page and repeat steps 2 and 3.
Close the connection.
()()()()()()()()

Algorithm for complete code refactoring:
Navigate to the page of each genre.
1.1) On the genre page, retrieve the following information about each book: price, title, availability, and genre.
1.2) Store the retrieved information in a list containing a collection of lists with the following signature: (title, price, availability (boolean), genre).
1.3) After all the information has been converted into a list of tuples, write an SQL command in a loop to add rows of information into the database.
1.4) Repeat steps 1.1 - 1.3 about 50 times (the number of genres presented on the website).
Additional:
After solving the above tasks, start thinking about error handling.
For example:

If scraping is performed again in the future, add a check for unique values so that only unique and updated records are added to the database (if such values appear on the site). Otherwise, do not add anything.
If certain objects disappear from the website, delete them from the table as well.
In simple terms, configure the program so that it can maintain the relevance of the data on an ongoing basis.

